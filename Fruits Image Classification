{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5350598,"sourceType":"datasetVersion","datasetId":3106263}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-04T11:43:21.665378Z","iopub.execute_input":"2024-07-04T11:43:21.665766Z","iopub.status.idle":"2024-07-04T11:43:22.833712Z","shell.execute_reply.started":"2024-07-04T11:43:21.665733Z","shell.execute_reply":"2024-07-04T11:43:22.832597Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\n\nprint(\"TensorFlow version:\", tf.__version__)\nprint(\"CUDA enabled:\", tf.test.is_built_with_cuda())\nprint(\"GPU available:\", tf.config.list_physical_devices('GPU'))","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:22.835575Z","iopub.execute_input":"2024-07-04T11:43:22.836043Z","iopub.status.idle":"2024-07-04T11:43:37.180550Z","shell.execute_reply.started":"2024-07-04T11:43:22.836009Z","shell.execute_reply":"2024-07-04T11:43:37.179333Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"2024-07-04 11:43:25.239048: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-04 11:43:25.239190: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-04 11:43:25.397560: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"TensorFlow version: 2.15.0\nCUDA enabled: True\nGPU available: []\n","output_type":"stream"}]},{"cell_type":"code","source":"# For data manipulation\nimport numpy as np\nimport pandas as pd\n\n# For data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Ingore the warnings\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:37.181821Z","iopub.execute_input":"2024-07-04T11:43:37.182435Z","iopub.status.idle":"2024-07-04T11:43:37.906519Z","shell.execute_reply.started":"2024-07-04T11:43:37.182406Z","shell.execute_reply":"2024-07-04T11:43:37.905352Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# DL Libraries\nimport os\nimport random\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.utils import image_dataset_from_directory\nfrom keras.optimizers import Adam","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:37.909351Z","iopub.execute_input":"2024-07-04T11:43:37.909744Z","iopub.status.idle":"2024-07-04T11:43:37.956122Z","shell.execute_reply.started":"2024-07-04T11:43:37.909700Z","shell.execute_reply":"2024-07-04T11:43:37.954901Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Load the image dataset from the directory using utils\n# ds = image_dataset_from_directory('E:\\DataScience Codanics\\Kaggle\\LAPTOP Items classification\\PC Part Classification\\Data')\n\ndataset = keras.utils.image_dataset_from_directory(\n    directory = '/kaggle/input/fruits-classification',\n    labels='inferred',\n    label_mode='int',\n    batch_size=32,\n    image_size=(256, 256),\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:37.957597Z","iopub.execute_input":"2024-07-04T11:43:37.958051Z","iopub.status.idle":"2024-07-04T11:43:50.021229Z","shell.execute_reply.started":"2024-07-04T11:43:37.957956Z","shell.execute_reply":"2024-07-04T11:43:50.020152Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Found 10000 files belonging to 1 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"dataset_size = len(dataset)\ntrain_size = int(0.7 * dataset_size)\nval_size = dataset_size - train_size\n\ntrain_ds = dataset.take(train_size)\nval_ds = dataset.skip(train_size).take(val_size)\n\nAUTOTUNE = tf.data.AUTOTUNE\ntrain_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:50.022405Z","iopub.execute_input":"2024-07-04T11:43:50.022716Z","iopub.status.idle":"2024-07-04T11:43:50.048144Z","shell.execute_reply.started":"2024-07-04T11:43:50.022690Z","shell.execute_reply":"2024-07-04T11:43:50.046623Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def dataset_to_tensors(dataset):\n    images = []\n    labels = []\n    for img, lbl in dataset.unbatch():\n        images.append(img.numpy())\n        labels.append(lbl.numpy())\n    return tf.convert_to_tensor(images), tf.convert_to_tensor(labels)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:50.049683Z","iopub.execute_input":"2024-07-04T11:43:50.050110Z","iopub.status.idle":"2024-07-04T11:43:50.056223Z","shell.execute_reply.started":"2024-07-04T11:43:50.050079Z","shell.execute_reply":"2024-07-04T11:43:50.055105Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# x_train, y_train, x_test, y_test  dividing \nx_train, y_train = dataset_to_tensors(train_ds) #dataset_to_tensors is function where we seprate  images and label\nx_test, y_test = dataset_to_tensors(val_ds)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:43:50.057959Z","iopub.execute_input":"2024-07-04T11:43:50.058350Z","iopub.status.idle":"2024-07-04T11:59:41.668185Z","shell.execute_reply.started":"2024-07-04T11:43:50.058320Z","shell.execute_reply":"2024-07-04T11:59:41.665871Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import os\nunique, count=np.unique(y_train, return_counts=True)\nplt.figure(figsize=(10, 8))\nplt.pie(count, labels=unique, autopct='%.0f%%')\nplt.title('Target Class Distribution')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T11:59:41.670792Z","iopub.execute_input":"2024-07-04T11:59:41.671330Z","iopub.status.idle":"2024-07-04T11:59:41.903569Z","shell.execute_reply.started":"2024-07-04T11:59:41.671281Z","shell.execute_reply":"2024-07-04T11:59:41.902321Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"[]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"print(\"Length of X_train: \", len(x_train))\nplt.imshow(x_train[34])\nplt.title(\"Checking X_train\"+str(y_train[58]))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T12:12:05.294119Z","iopub.execute_input":"2024-07-04T12:12:05.294583Z","iopub.status.idle":"2024-07-04T12:12:05.539782Z","shell.execute_reply.started":"2024-07-04T12:12:05.294530Z","shell.execute_reply":"2024-07-04T12:12:05.538590Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Length of X_train:  7008\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"x_train = x_train / 255.0\nx_test = x_test / 255.0","metadata":{"execution":{"iopub.status.busy":"2024-07-04T12:13:18.283919Z","iopub.execute_input":"2024-07-04T12:13:18.284457Z","iopub.status.idle":"2024-07-04T12:13:23.938400Z","shell.execute_reply.started":"2024-07-04T12:13:18.284422Z","shell.execute_reply":"2024-07-04T12:13:23.937318Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"print(\"X_train shape: \", x_train.shape)\nprint(\"X_test shape: \", x_test.shape)\n\nprint(\"\\ny_train shape: \", y_train.shape)\nprint(\"y_test shape: \", y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T12:13:47.217353Z","iopub.execute_input":"2024-07-04T12:13:47.217872Z","iopub.status.idle":"2024-07-04T12:13:47.225061Z","shell.execute_reply.started":"2024-07-04T12:13:47.217835Z","shell.execute_reply":"2024-07-04T12:13:47.223732Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"X_train shape:  (7008, 256, 256, 3)\nX_test shape:  (2992, 256, 256, 3)\n\ny_train shape:  (7008,)\ny_test shape:  (2992,)\n","output_type":"stream"}]},{"cell_type":"code","source":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), input_shape = (50, 50, 3), padding = 'same', activation = 'relu'))\nmodel.add(Conv2D(32, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3, 3), padding = 'same', activation=\"relu\"))\nmodel.add(Conv2D(64, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4, activation = 'softmax'))","metadata":{"execution":{"iopub.status.busy":"2024-07-04T12:15:03.393263Z","iopub.execute_input":"2024-07-04T12:15:03.394260Z","iopub.status.idle":"2024-07-04T12:15:03.579268Z","shell.execute_reply.started":"2024-07-04T12:15:03.394202Z","shell.execute_reply":"2024-07-04T12:15:03.578165Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.optimizers import Adam\noptimizer = Adam(learning_rate=0.001)\n\nmodel.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-07-04T12:15:19.942495Z","iopub.execute_input":"2024-07-04T12:15:19.942983Z","iopub.status.idle":"2024-07-04T12:15:19.965184Z","shell.execute_reply.started":"2024-07-04T12:15:19.942926Z","shell.execute_reply":"2024-07-04T12:15:19.963859Z"},"trusted":true},"execution_count":19,"outputs":[]}]}